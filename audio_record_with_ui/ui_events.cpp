// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.3
// LVGL version: 8.3.11
// Project name: Audio

#include "ui.h"
#include "ui_events.h"
#include <Arduino.h>
#include "driver/i2s.h"
#include "SD.h"
#include "FS.h"
#include "SPI.h"

// I2S Microphone Pins (CrowPanel 2.8" HMI)
#define I2S_SD          10
#define I2S_WS          3
#define I2S_SCK         9
#define MIC_ENABLE      45
#define I2S_PORT        I2S_NUM_0

// SD Card Pins
#define SD_CS           7
#define SD_MOSI         6
#define SD_MISO         4
#define SD_SCK          5

// Recording Settings
#define SAMPLE_RATE     16000
#define BUFFER_SIZE     512
#define DEFAULT_GAIN    2

// WAV Header Structure
typedef struct {
 char riff[4];
 uint32_t flength;
 char wave[4];
 char fmt[4];
 uint32_t chunk_size;
 uint16_t format_tag;
 uint16_t num_chans;
 uint32_t srate;
 uint32_t bytes_per_sec;
 uint16_t bytes_per_samp;
 uint16_t bits_per_samp;
 char data[4];
 uint32_t dlength;
} WAV_HEADER;

// Global variables
static File audioFile;
static bool recording = false;
static uint32_t fileCounter = 0;
static uint32_t recordingBytes = 0;
static uint32_t lastUpdateTime = 0;
static SPIClass sdSPI(HSPI);
static int currentGain = DEFAULT_GAIN;
static bool systemInitialized = false;

// Function prototypes
static bool initI2S(void);
static bool initSDCard(void);
static void writeWAVHeader(File* file);
static void updateWAVHeader(File* file, uint32_t dataSize);

// C++ linkage for functions called from C
extern "C" {

// Initialize audio recording system
bool audioRecorderInit(void) {
 if (systemInitialized) {
   return true;
 }
  Serial.println("Initializing Audio Recorder...");
  // Enable microphone power (CRITICAL!)
 pinMode(MIC_ENABLE, OUTPUT);
 digitalWrite(MIC_ENABLE, HIGH);
 delay(100);
 Serial.println("✓ Microphone power enabled");
  // Initialize I2S
 if (!initI2S()) {
   Serial.println("✗ I2S initialization failed!");
   return false;
 }
 Serial.println("✓ I2S initialized");
  // Initialize SD Card
 if (!initSDCard()) {
   Serial.println("✗ SD Card initialization failed!");
   return false;
 }
 Serial.println("✓ SD Card initialized");
  systemInitialized = true;
 Serial.println("✓ Audio Recorder Ready!");
  return true;
}

// Process audio recording (call this in loop)
void audioRecorderProcess(void) {
 if (!recording) {
   return;
 }
  static int16_t buffer[BUFFER_SIZE];
 size_t bytes_read = 0;
  // Read audio data from microphone
 esp_err_t result = i2s_read(I2S_PORT, buffer, sizeof(buffer), &bytes_read, 10);
  if (result == ESP_OK && bytes_read > 0) {
   int samples = bytes_read / sizeof(int16_t);
  
   // Apply gain and prevent clipping
   for (int i = 0; i < samples; i++) {
     int32_t sample = buffer[i] * currentGain;
    
     if (sample > 32767) sample = 32767;
     if (sample < -32768) sample = -32768;
    
     buffer[i] = (int16_t)sample;
   }
  
   // Write to SD card
   size_t written = audioFile.write((uint8_t*)buffer, bytes_read);
   recordingBytes += written;
 }
  // Update display every second
 if (millis() - lastUpdateTime >= 1000) {
   float seconds = recordingBytes / (float)(SAMPLE_RATE * 2);
   float sizeKB = recordingBytes / 1024.0;
  
   Serial.printf("Recording: %.1fs (%.1f KB)\n", seconds, sizeKB);
  
   // Update UI if you have a time/status label
   // Uncomment and modify based on your UI component names:
   /*
   char timeText[32];
   sprintf(timeText, "%.1fs", seconds);
   lv_label_set_text(ui_TimeLabel, timeText);
   */
  
   lastUpdateTime = millis();
 }
}

// Get recording status
bool isRecording(void) {
 return recording;
}

// Get current gain
int getGain(void) {
 return currentGain;
}

// LVGL Event Handler: Start Recording
void startrecording(lv_event_t * e)
{
 // Initialize system if not already done
 if (!systemInitialized) {
   if (!audioRecorderInit()) {
     Serial.println("Cannot start recording - system not initialized!");
     return;
   }
 }
  if (recording) {
   Serial.println("Already recording!");
   return;
 }
  // Generate filename
 char filename[32];
 sprintf(filename, "/audio_%04d.wav", fileCounter++);
  Serial.printf("Starting recording: %s\n", filename);
 Serial.printf("Gain: %dx\n", currentGain);
  // Open file on SD card
 audioFile = SD.open(filename, FILE_WRITE);
 if (!audioFile) {
   Serial.println("ERROR: Cannot create file!");
   return;
 }
  // Write WAV header (will be updated when stopping)
 writeWAVHeader(&audioFile);
  // Clear I2S buffer
 i2s_zero_dma_buffer(I2S_PORT);
  // Start recording
 recording = true;
 recordingBytes = 0;
 lastUpdateTime = millis();
  Serial.println("✓ Recording started!");
  // Update UI - uncomment and modify based on your UI:
 /*
 lv_label_set_text(ui_StatusLabel, "Recording...");
 */
}

// LVGL Event Handler: Stop Recording
void stoprecording(lv_event_t * e)
{
 if (!recording) {
   Serial.println("Not recording!");
   return;
 }
  recording = false;
  // Get file size
 uint32_t fileSize = audioFile.size();
 uint32_t dataSize = fileSize - sizeof(WAV_HEADER);
  // Update WAV header with actual sizes
 updateWAVHeader(&audioFile, dataSize);
  // Close file
 audioFile.close();
  // Calculate duration
 float duration = dataSize / (float)(SAMPLE_RATE * 2);
 float sizeKB = fileSize / 1024.0;
  Serial.printf("✓ Recording stopped!\n");
 Serial.printf("  Duration: %.1f seconds\n", duration);
 Serial.printf("  File size: %.1f KB\n", sizeKB);
  // Update UI - uncomment and modify based on your UI:
 /*
 char statusText[64];
 sprintf(statusText, "Saved: %.1fs", duration);
 lv_label_set_text(ui_StatusLabel, statusText);
 */
}

// LVGL Event Handler: Increase Gain
void increasegain(lv_event_t * e)
{
 if (currentGain < 16) {
   currentGain++;
   Serial.printf("✓ Gain increased to: %dx\n", currentGain);
  
   // Update UI - uncomment and modify based on your UI:
   /*
   char gainText[16];
   sprintf(gainText, "Gain: %dx", currentGain);
   lv_label_set_text(ui_GainLabel, gainText);
   */
 } else {
   Serial.println("⚠ Gain already at maximum (16x)");
 }
}

// LVGL Event Handler: Decrease Gain
void decreasegain(lv_event_t * e)
{
 if (currentGain > 1) {
   currentGain--;
   Serial.printf("✓ Gain decreased to: %dx\n", currentGain);
  
   // Update UI - uncomment and modify based on your UI:
   /*
   char gainText[16];
   sprintf(gainText, "Gain: %dx", currentGain);
   lv_label_set_text(ui_GainLabel, gainText);
   */
 } else {
   Serial.println("⚠ Gain already at minimum (1x)");
 }
}

} // extern "C"

// ========== Private Helper Functions ==========

static bool initI2S(void) {
 i2s_config_t i2s_config = {
   .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
   .sample_rate = SAMPLE_RATE,
   .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
   .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
   .communication_format = I2S_COMM_FORMAT_I2S,
   .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
   .dma_buf_count = 4,
   .dma_buf_len = BUFFER_SIZE,
   .use_apll = false,
   .tx_desc_auto_clear = false,
   .fixed_mclk = 0
 };
  i2s_pin_config_t pin_config = {
   .bck_io_num = I2S_SCK,
   .ws_io_num = I2S_WS,
   .data_out_num = I2S_PIN_NO_CHANGE,
   .data_in_num = I2S_SD
 };
  // Uninstall if already installed
 i2s_driver_uninstall(I2S_PORT);
  if (i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL) != ESP_OK) {
   return false;
 }
  if (i2s_set_pin(I2S_PORT, &pin_config) != ESP_OK) {
   return false;
 }
  return true;
}

static bool initSDCard(void) {
 sdSPI.begin(SD_SCK, SD_MISO, SD_MOSI, SD_CS);
  // Try high speed first
 if (!SD.begin(SD_CS, sdSPI, 80000000)) {
   // Try lower speed
   if (!SD.begin(SD_CS, sdSPI, 40000000)) {
     return false;
   }
 }
  if (SD.cardType() == CARD_NONE) {
   return false;
 }
  return true;
}

static void writeWAVHeader(File* file) {
 WAV_HEADER header;
  memcpy(header.riff, "RIFF", 4);
 header.flength = 0;
 memcpy(header.wave, "WAVE", 4);
 memcpy(header.fmt, "fmt ", 4);
 header.chunk_size = 16;
 header.format_tag = 1;
 header.num_chans = 1;
 header.srate = SAMPLE_RATE;
 header.bytes_per_sec = SAMPLE_RATE * 2;
 header.bytes_per_samp = 2;
 header.bits_per_samp = 16;
 memcpy(header.data, "data", 4);
 header.dlength = 0;
  file->write((uint8_t*)&header, sizeof(WAV_HEADER));
}

static void updateWAVHeader(File* file, uint32_t dataSize) {
 uint32_t fileSize = sizeof(WAV_HEADER) + dataSize;
  // Update file size
 file->seek(4);
 uint32_t flength = fileSize - 8;
 file->write((uint8_t*)&flength, 4);
  // Update data size
 file->seek(40);
 file->write((uint8_t*)&dataSize, 4);
}

